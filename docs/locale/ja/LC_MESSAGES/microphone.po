# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 1.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-04 20:28+0900\n"
"PO-Revision-Date: 2020-12-29 11:39+0900\n"
"Last-Translator: Minoru Inachi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../microphone.rst:2
msgid "Microphone **V2**"
msgstr "マイク **V2**"

#: ../../microphone.rst:6
msgid ""
"This object lets you access the built-in microphone available on the "
"micro:bit **V2**. It can be used to respond to sound. The microphone "
"input is located on the front of the board alongside a microphone "
"activity LED, which is lit when the microphone is in use."
msgstr ""
"このオブジェクトを使うと、micro:bit **V2** に内蔵のマイクにアクセスできます。"
"マイクは音に反応するために使えます。マイク入力は、マイクを使っているときに点灯する"
"ボードの前面のマイクアクティビティ LED の横にあります。"

msgid ""
".. image:: microphone.png\n"
"   :alt: micro:bit with microphone LED on"
msgstr ""

#: ../../microphone.rst:18
msgid "Sound events"
msgstr "サウンドイベント"

#: ../../microphone.rst:19
msgid ""
"The microphone can respond to a pre-defined set of sound events that are "
"based on the amplitude and wavelength of the sound."
msgstr ""
"マイクは、音の振幅と波長に基づいて事前定義されたサウンドイベントに応答できます。"

#: ../../microphone.rst:22
msgid ""
"These sound events are represented by instances of the ``SoundEvent`` "
"class, accessible via variables in ``microbit.SoundEvent``:"
msgstr ""
"これらのサウンドイベントは ``SoundEvent`` クラスのインスタンスによって表され、"
"次の ``microbit.SoundEvent`` 変数を介してアクセスできます。"

#: ../../microphone.rst:25
msgid ""
"``microbit.SoundEvent.QUIET``: Represents the transition of sound events,"
" from ``loud`` to ``quiet`` like speaking or background music."
msgstr ""
"``microbit.SoundEvent.QUIET``: 発話やBGMのように「大きな音」(`loud`)から"
"「静かな音」(`quiet`)への変化を表します。"

#: ../../microphone.rst:28
msgid ""
"``microbit.SoundEvent.LOUD``: Represents the transition of sound events, "
"from ``quiet`` to ``loud`` like clapping or shouting."
msgstr ""
"``microbit.SoundEvent.LOUD``: 拍手や叫び声のように「静かな音」(`quiet`)から"
"「大きな音」(`loud`)への変化を表します。\n"

#: ../../microphone.rst:32
msgid "Functions"
msgstr ""関数

#: ../../microphone.rst:36
msgid ""
"**return**: the name of the last recorded sound event, "
"``SoundEvent('loud')`` or ``SoundEvent('quiet')``."
msgstr ""
"**戻り値**: 記録されている最新のサウンドイベントの名前、"
"``SoundEvent('loud')`` もしくは ``SoundEvent('quiet')`` を返します。"

#: ../../microphone.rst:41 ../../microphone.rst:49
msgid ""
"**event**: a sound event,  such as ``SoundEvent.LOUD`` or "
"``SoundEvent.QUIET``."
msgstr ""
"**event**: サウンドイベント。 `SoundEvent.LOUD` または `SoundEvent.QUIET` 。"

#: ../../microphone.rst:43
msgid ""
"**return**: ``true`` if sound was heard at least once since the last "
"call, otherwise ``false``. ``was_event()`` also clears the sound event "
"history before returning."
msgstr ""
"**戻り値**: 直前の呼出しから少なくとも一度は指定のサウンドイベントが発生した場合は "
"`true` 、さもなければ `false` を返します。 "
"``was_event()`` は戻る前にサウンドイベントの履歴をクリアします。"

#: ../../microphone.rst:51
msgid ""
"**return**: ``true`` if sound event is the most recent since the last "
"call, otherwise ``false``. It does not clear the sound event history."
msgstr ""
"**戻り値**: 直前の呼出しから発生した最新のサウンドイベントが指定のものであれば "
"``true`` 、さもなければ ``false`` を返します。サウンドイベントの履歴はクリアしません。"

#: ../../microphone.rst:56
msgid ""
"**return**: a tuple of the event history. The most recent is listed last."
" ``get_events()`` also clears the sound event history before returning."
msgstr ""
"**戻り値**: サウンドイベント履歴のタプル。最新のものが最後にリストされます。 "
"``get_events()`` は戻る前にサウンドイベント履歴をクリアします。"

#: ../../microphone.rst:61
msgid ""
"**event**: a sound event, such as ``SoundEvent.LOUD`` or "
"``SoundEvent.QUIET``."
msgstr ""
"**event**: サウンドイベント。 `SoundEvent.LOUD` または `SoundEvent.QUIET` 。"

#: ../../microphone.rst:64
msgid ""
"**value**: The threshold level in the range 0-255. For example, "
"``set_threshold(SoundEvent.LOUD, 250)`` will only trigger if the sound is"
" very loud (>= 250)."
msgstr ""
"**value**: 0-255 の範囲の閾値レベル。"
"たとえば `set_threshold(SoundEvent.LOUD, 250)` は音が非常に大きい場合に"
"のみトリガされます(>= 250)。"

#: ../../microphone.rst:70
msgid ""
"**return**: a representation of the sound pressure level in the range 0 "
"to 255."
msgstr ""
"**戻り値**: 0-255の範囲で表される音圧レベルを返します。"

#: ../../microphone.rst:75
msgid "Example"
msgstr "サンプルコード"

#: ../../microphone.rst:77
msgid "An example that runs through some of the functions of the microphone API::"
msgstr "マイクAPIのいくつかの機能を実行するサンプルコード:"

#: ../../microphone.rst:79
msgid ""
"# Basic test for microphone.  This test should update the display when\n"
"# Button A is pressed and a loud or quiet sound *is* heard, printing the\n"
"# results. On Button B this test should update the display when a loud or"
"\n"
"# quiet sound *was* heard, printing the results. On shake this should "
"print\n"
"# the last sounds heard, you should try this test whilst making a loud "
"sound\n"
"# and a quiet one before you shake.\n"
"\n"
"from microbit import *\n"
"\n"
"display.clear()\n"
"sound = microphone.current_event()\n"
"\n"
"while True:\n"
"    if button_a.is_pressed():\n"
"        if microphone.current_event() == SoundEvent.LOUD:\n"
"            display.show(Image.SQUARE)\n"
"            uart.write('isLoud\\n')\n"
"        elif microphone.current_event() == SoundEvent.QUIET:\n"
"            display.show(Image.SQUARE_SMALL)\n"
"            uart.write('isQuiet\\n')\n"
"        sleep(500)\n"
"    display.clear()\n"
"    if button_b.is_pressed():\n"
"        if microphone.was_event(SoundEvent.LOUD):\n"
"            display.show(Image.SQUARE)\n"
"            uart.write('wasLoud\\n')\n"
"        elif microphone.was_event(SoundEvent.QUIET):\n"
"            display.show(Image.SQUARE_SMALL)\n"
"            uart.write('wasQuiet\\n')\n"
"        else:\n"
"            display.clear()\n"
"        sleep(500)\n"
"    display.clear()\n"
"    if accelerometer.was_gesture('shake'):\n"
"        sounds = microphone.get_events()\n"
"        soundLevel = microphone.sound_level()\n"
"        print(soundLevel)\n"
"        for sound in sounds:\n"
"            if sound == SoundEvent.LOUD:\n"
"                display.show(Image.SQUARE)\n"
"            elif sound == SoundEvent.QUIET:\n"
"                display.show(Image.SQUARE_SMALL)\n"
"            else:\n"
"                display.clear()\n"
"            print(sound)\n"
"            sleep(500)"
msgstr ""
"# マイクの基本テストです。このテストは、ボタンAが押され、大きな音や静かな音が\n"
"# *したときに* 表示を更新し、結果を表示します。ボタンBでは、大きな音や静かな音が\n"
"# *発生したことがあれば* 表示を更新し、結果を表示します。シェイク時には、最後に\n"
"# 発生したサウンドイベントを表示します。シェイクする前に、大きな音と静かな音を\n"
"# 出しながらこのテストを試してください。\m"
"\n"
"from microbit import *\n"
"\n"
"display.clear()\n"
"sound = microphone.current_event()\n"
"\n"
"while True:\n"
"    if button_a.is_pressed():\n"
"        if microphone.current_event() == SoundEvent.LOUD:\n"
"            display.show(Image.SQUARE)\n"
"            uart.write('isLoud\\n')\n"
"        elif microphone.current_event() == SoundEvent.QUIET:\n"
"            display.show(Image.SQUARE_SMALL)\n"
"            uart.write('isQuiet\\n')\n"
"        sleep(500)\n"
"    display.clear()\n"
"    if button_b.is_pressed():\n"
"        if microphone.was_event(SoundEvent.LOUD):\n"
"            display.show(Image.SQUARE)\n"
"            uart.write('wasLoud\\n')\n"
"        elif microphone.was_event(SoundEvent.QUIET):\n"
"            display.show(Image.SQUARE_SMALL)\n"
"            uart.write('wasQuiet\\n')\n"
"        else:\n"
"            display.clear()\n"
"        sleep(500)\n"
"    display.clear()\n"
"    if accelerometer.was_gesture('shake'):\n"
"        sounds = microphone.get_events()\n"
"        soundLevel = microphone.sound_level()\n"
"        print(soundLevel)\n"
"        for sound in sounds:\n"
"            if sound == SoundEvent.LOUD:\n"
"                display.show(Image.SQUARE)\n"
"            elif sound == SoundEvent.QUIET:\n"
"                display.show(Image.SQUARE_SMALL)\n"
"            else:\n"
"                display.clear()\n"
"            print(sound)\n"
"            sleep(500)"

