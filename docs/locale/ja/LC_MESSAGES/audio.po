# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2022, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 1.1.0-beta.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-16 09:08+0900\n"
"PO-Revision-Date: 2022-09-17 13:34+0900\n"
"Last-Translator: Minoru Inachi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../audio.rst:2
msgid "Audio"
msgstr "オーディオ"

#: ../../audio.rst:6
msgid "This module allows you play sounds with the micro:bit."
msgstr "このモジュールは micro:bit でサウンドを再生できるようにします。 "

#: ../../audio.rst:8
msgid ""
"By default sound output will be via the edge connector on pin 0 and the "
":doc:`built-in speaker <speaker>` (**V2**). You can connect wired "
"headphones or a speaker to pin 0 and GND on the edge connector to hear "
"the sounds."
msgstr ""
"デフォルトでサウンドはエッジコネクタの端子 0 と "
":doc:`内蔵スピーカー <speaker>` (**V2**)に出力します。端子 0 と GND に"
"有線ヘッドフォンやスピーカーを繋いでサウンドを鳴らせます。"

#: ../../audio.rst:12
msgid ""
"The ``audio`` module can be imported as ``import audio`` or accessed via "
"the ``microbit`` module as ``microbit.audio``."
msgstr ""
"``audio`` モジュールは ``import audio`` でインポートするか、 ``microbit`` モジュールの "
"``microbit.audio`` にアクセスすることで利用できるようになります。"

#: ../../audio.rst:15
msgid ""
"There are three different kinds of audio sources that can be played using"
" the :py:meth:`audio.play` function:"
msgstr ""
":py:meth:`audio.play` 関数を使って再生できる音源には3種類あります:"

#: ../../audio.rst:18
msgid ""
"`Built in sounds <#built-in-sounds-v2>`_ (**V2**), e.g. "
"``audio.play(Sound.HAPPY)``"
msgstr ""
"`内蔵サウンド <#built-in-sounds-v2>`_ (**V2**): たとえば "
"``audio.play(Sound.HAPPY)`` など"

#: ../../audio.rst:20
msgid ""
"`Sound Effects <#sound-effects-v2>`_ (**V2**), a way to create custom "
"sounds by configuring its parameters::"
msgstr ""
"`サウンド効果 <#sound-effects-v2>`_ (**V2**): パラメータ指定によりカスタムサウンド"
"を作る方法です::"

#: ../../audio.rst:23
msgid ""
"my_effect = audio.SoundEffect(freq_start=400, freq_end=2500, "
"duration=500)\n"
"audio.play(my_effect)"
msgstr ""

#: ../../audio.rst:26
msgid ""
"`Audio Frames <#audioframe>`_, an iterable (like a list or a generator) "
"of Audio Frames, which are lists of 32 samples with values from 0 to "
"255::"
msgstr ""
"`オーディオフレーム <#audioframe>`_ : AudioFrame のイテラブル"
"(リストやジェネレータなど) - AudioFrame は 0 から 255 の値を持つ32項目のリストです::"

#: ../../audio.rst:29
msgid ""
"square_wave = audio.AudioFrame()\n"
"for i in range(16):\n"
"    square_wave[i] = 0\n"
"    square_wave[i + 16] = 255\n"
"audio.play([square_wave] * 64)"
msgstr ""

#: ../../audio.rst:37
msgid "Functions"
msgstr "関数"

#: ../../audio.rst:41
msgid "Play the audio source to completion."
msgstr "音源を最後まで再生します。"

#: ../../audio.rst
#, fuzzy
msgid "param"
msgstr "パラメータ"

##: ../../audio.rst:43
#msgid ""
#"There are three types of data that can be used as a source:
#msgstr ""
#"指定できる音源には3種類あります:"

#: ../../audio.rst:45
msgid ""
"``Sound``: The ``microbit`` module contains a list of built-in sounds, e.g. "
"``audio.play(Sound.TWINKLE)``. A full list can be found in the `Built "
"in sounds <#built-in-sounds-v2>`_ section."
msgstr ""
"``Sound``: 内蔵サウンドを持った ``microbit`` モジュール。たとえば "
"``audio.play(Sound.TWINKLE)`` のように指定します。全一覧は "
"`内蔵サウンド <#built-in-sounds-v2>`_ の章を参照してください。"

#: ../../audio.rst:48
msgid ""
"``SoundEffect``: A sound effect, or an iterable of sound effects, "
"created via the :py:meth:`audio.SoundEffect` class"
msgstr ""
"``SoundEffect``: サウンド効果、またはサウンド効果のイテラブル。"
"サウンド効果は :py:meth:`audio.SoundEffect` クラスで作ります。

#: ../../audio.rst:50
msgid ""
"``AudioFrame``: An iterable of ``AudioFrame`` instances as described "
"in the `AudioFrame Technical Details <#id2>`_ section"
msgstr ""
"``AudioFrame``: `AudioFrame の技術詳細 <#id2>`_ の章に説明されている "
"``AudioFrame`` のイテラブル"

#: ../../audio.rst:53
msgid ""
"If ``wait`` is ``True``, this function will block until the source is "
"exhausted."
msgstr ""
"``wait`` が ``True`` の場合、音源の再生が終わるまでこの関数から戻りません。"

#: ../../audio.rst:56
msgid ""
"An optional argument to specify the output pin can be used to override "
"the default of ``pin0``. If we do not want any sound to play we can use "
"``pin=None``."
msgstr ""
"**pin**: 出力端子をデフォルトの ``pin0`` から変えるためのオプション引数です。"
"音を鳴らしたくない場合は ``pin=None`` を指定します。"

#: ../../audio.rst:60
msgid ""
"specifies a differential edge connector pin to connect to an external "
"speaker instead of ground. This is ignored for the **V2** revision."
msgstr ""
"スピーカーの２本ある線の一方を接続する先である GND を別の端子に"
"したい場合に使います。 **V2** ではこの指定を無視します。"

#: ../../audio.rst
#, fuzzy
msgid "returns"
msgstr "戻り値"

#: ../../audio.rst:66
msgid "``True`` if audio is playing, otherwise returns ``False``."
msgstr "オーディオを再生中であれば ``True``、再生していなければ ``False`` を返します。"

#: ../../audio.rst:70
msgid "Stops all audio playback."
msgstr "すべてのオーディオ再生を停止します。"

#: ../../audio.rst:74
msgid "Built-in sounds **V2**"
msgstr "**V2** に内蔵のサウンド"

#: ../../audio.rst:76
msgid "The built-in sounds can be called using ``audio.play(Sound.NAME)``."
msgstr "以下の内蔵のサウンドは ``audio.play(Sound.NAME)`` のようにして再生できます。"

#: ../../audio.rst:78
msgid "``Sound.GIGGLE``"
msgstr ""

#: ../../audio.rst:79
msgid "``Sound.HAPPY``"
msgstr ""

#: ../../audio.rst:80
msgid "``Sound.HELLO``"
msgstr ""

#: ../../audio.rst:81
msgid "``Sound.MYSTERIOUS``"
msgstr ""

#: ../../audio.rst:82
msgid "``Sound.SAD``"
msgstr ""

#: ../../audio.rst:83
msgid "``Sound.SLIDE``"
msgstr ""

#: ../../audio.rst:84
msgid "``Sound.SOARING``"
msgstr ""

#: ../../audio.rst:85
msgid "``Sound.SPRING``"
msgstr ""

#: ../../audio.rst:86
msgid "``Sound.TWINKLE``"
msgstr ""

#: ../../audio.rst:87
msgid "``Sound.YAWN``"
msgstr ""

#: ../../audio.rst:90
msgid "Sounds Example"
msgstr "サウンドのサンプルコード"

#: ../../audio.rst:94
msgid ""
"from microbit import *\n"
"\n"
"while True:\n"
"    if button_a.is_pressed() and button_b.is_pressed():\n"
"        # When pressing both buttons only play via the edge connector\n"
"        audio.play(Sound.HELLO, pin=pin0)\n"
"    elif button_a.is_pressed():\n"
"        # On button A play a sound and when it's done show an image\n"
"        audio.play(Sound.HAPPY)\n"
"        display.show(Image.HAPPY)\n"
"    elif button_b.is_pressed():\n"
"        # On button B play a sound and show an image at the same time\n"
"        audio.play(Sound.TWINKLE, wait=False)\n"
"        display.show(Image.BUTTERFLY)\n"
"\n"
"    sleep(500)\n"
"    display.clear()"
msgstr ""
"from microbit import *\n"
"\n"
"while True:\n"
"    if button_a.is_pressed() and button_b.is_pressed():\n"
"        # 両ボタンを押下したときはエッジコネクタを介してだけ再生\n"
"        audio.play(Sound.HELLO, pin=pin0)\n"
"    elif button_a.is_pressed():\n"
"        # Aボタンを押したときにサウンドを再生して、イメージを表示\n"
"        audio.play(Sound.HAPPY)\n"
"        display.show(Image.HAPPY)\n"
"    elif button_b.is_pressed():\n"
"        # Bボタンを押したときにサウンド再生とイメージ表示を同時に行う\n"
"        audio.play(Sound.TWINKLE, wait=False)\n"
"        display.show(Image.BUTTERFLY)\n"
"\n"
"    sleep(500)\n"
"    display.clear()"

#: ../../audio.rst:114
msgid "Sound Effects **V2**"
msgstr "サウンド効果 **V2**"

#: ../../audio.rst:119
msgid ""
"An ``SoundEffect`` instance represents a sound effect, composed by a set "
"of parameters configured via the constructor or attributes."
msgstr ""
"``SoundEffect`` インスタンスはサウンド効果を表します。サウンド効果は、"
"コンストラクタや属性で設定したパラメータのセットで構成されるます。"

#: ../../audio.rst:122
msgid ""
"All the parameters are optional, with default values as shown above, and "
"they can all be modified via attributes of the same name. For example, we"
" can first create an effect ``my_effect = SoundEffect(duration=1000)``, "
"and then change its attributes ``my_effect.duration = 500``."
msgstr ""
"すべてのパラメータはオプションで、デフォルト値は上記のとおりです。"
"また、すべてのパラメータは同名の属性で変更できます。たとえば、まず "
"``my_effect =SoundEffect(duration=1000)`` というサウンド効果を作成した後に、 "
"``my_effect.duration = 500`` で属性を変更できます。"

#: ../../audio.rst:127
msgid "Start frequency in Hertz (Hz), default: ``500``"
msgstr "開始周波数をヘルツ(Hz)で指定します: デフォルトは ``500``"

#: ../../audio.rst:128
msgid "End frequency in Hertz (Hz), default: ``2500``"
msgstr "終了周波数をヘルツ(Hz)で指定します: デフォルトは ``2500``"

#: ../../audio.rst:129
msgid "Duration of the sound (ms), default: ``500``"
msgstr "サウンドの長さをミリ秒(ms)で指定します: デフォルトは ``500``"

#: ../../audio.rst:130
msgid "Start volume value, range 0-255, default: ``255``"
msgstr "開始音量を 0-255 の範囲で指定します。デフォルトは ``255``"

#: ../../audio.rst:131
msgid "End volume value, range 0-255, default: ``0``"
msgstr "終了音量を 0-255 の範囲で指定します。デフォルトは ``0``"

#: ../../audio.rst:132
msgid ""
"Type of wave shape, one of these values: ``WAVE_SINE``, "
"``WAVE_SAWTOOTH``, ``WAVE_TRIANGLE``, ``WAVE_SQUARE``, ``WAVE_NOISE`` "
"(randomly generated noise). Default: ``WAVE_SQUARE``"
msgstr ""
"波形の種類。次の値のいずれかを指定します:  ``WAVE_SINE``, "
"``WAVE_SAWTOOTH``, ``WAVE_TRIANGLE``, ``WAVE_SQUARE``, ``WAVE_NOISE`` "
"(ランダムに生成したノイズ)。デフォルトは ``WAVE_SQUARE`` です。"

#: ../../audio.rst:135
msgid ""
"Effect to add on the sound, one of the following values: ``FX_TREMOLO``, "
"``FX_VIBRATO``, ``FX_WARBLE``, or ``FX_NONE``. Default: ``FX_NONE``"
msgstr ""
"サウンドに追加する効果。次の値のいずれかを指定します: ``FX_TREMOLO``, "
"``FX_VIBRATO``, ``FX_WARBLE``, ``FX_NONE`` 。デフォルトは ``FX_NONE`` です。"

#: ../../audio.rst:138
msgid ""
"The type of the interpolation curve between the start and end "
"frequencies, different wave shapes have different rates of change in "
"frequency. One of the following values: ``SHAPE_LINEAR``, "
"``SHAPE_CURVE``, ``SHAPE_LOG``. Default: ``SHAPE_LOG``"
msgstr ""
"開始周波数と終了周波数の補間曲線の種類で、波形の違いにより周波数の変化率が異なります。"
"次の値のうちのいずれかを指定します: ``SHAPE_LINEAR``, "
"``SHAPE_CURVE``, ``SHAPE_LOG`` 。デフォルトは ``SHAPE_LOG`` です。"

#: ../../audio.rst:145
msgid "A copy of the SoundEffect."
msgstr "SoundEffect のコピー。"

#: ../../audio.rst:149
msgid "Start frequency in Hertz (Hz), a number between ``0`` and ``9999``."
msgstr ""
"開始周波数。単位はヘルツ(Hz)で、 ``0`` から ``9999`` の範囲の数値です。"

#: ../../audio.rst:153
msgid "End frequency in Hertz (Hz), a number between ``0`` and ``9999```."
msgstr "終了周波数。単位はヘルツ(Hz)で、 ``0`` から ``9999`` の範囲の数値です。"

#: ../../audio.rst:157
msgid ""
"Duration of the sound in milliseconds, a number between ``0`` and "
"``9999``."
msgstr ""
"サウンドの長さ。 ``0`` から ``9999`` の範囲の数値です。"

#: ../../audio.rst:162
msgid "Start volume value, a number between ``0`` and ``255``."
msgstr ""
"開始音量。 ``0`` から ``255`` の範囲の数値です。"

#: ../../audio.rst:166
msgid "End volume value, a number between ``0`` and ``255``."
msgstr ""
"終了音量。 ``0`` から ``255`` の範囲の数値です。"

#: ../../audio.rst:170
msgid ""
"Type of wave shape, one of these values: ``WAVE_SINE``, "
"``WAVE_SAWTOOTH``, ``WAVE_TRIANGLE``, ``WAVE_SQUARE``, ``WAVE_NOISE`` "
"(randomly generated noise)."
msgstr ""
"波形の種類。次の値のいずれか:  ``WAVE_SINE``, "
"``WAVE_SAWTOOTH``, ``WAVE_TRIANGLE``, ``WAVE_SQUARE``, ``WAVE_NOISE`` "
"(ランダムに生成したノイズ)。"

#: ../../audio.rst:176
msgid ""
"Effect to add on the sound, one of the following values: ``FX_TREMOLO``, "
"``FX_VIBRATO``, ``FX_WARBLE``, or ``None``."
msgstr ""
"サウンドに追加する効果。次の値のいずれかを: ``FX_TREMOLO``, "
"``FX_VIBRATO``, ``FX_WARBLE``, ``FX_NONE`` 。"

#: ../../audio.rst:181
msgid ""
"The type of interpolation curve between the start and end frequencies, "
"different wave shapes have different rates of change in frequency. One of"
" the following values: ``SHAPE_LINEAR``, ``SHAPE_CURVE``, ``SHAPE_LOG``."
msgstr ""
"開始周波数と終了周波数の補間曲線の種類で、波形の違いにより周波数の変化率が異なります。"
"次の値のうちのいずれか: ``SHAPE_LINEAR``, "
"``SHAPE_CURVE``, ``SHAPE_LOG`` 。"

#: ../../audio.rst:186
msgid ""
"The arguments used to create any Sound Effect, can be inspected by "
"looking at each of the SoundEffect instance attributes, or by converting "
"the instance into a string (which can be done via ``str()`` function, or "
"by using a function that does the conversion automatically like "
"``print()``)."
msgstr ""
"サウンド効果の作成に使った引数は、サウンド効果のインスタンス属性を見るか、"
"インスタンスを文字列に変換することで調べることができます(文字列への変換は "
"``str()`` 関数、または ``print()`` のように自動的に変換する関数を使ってできます)。

#: ../../audio.rst:192
msgid ""
"For example, with the :doc:`REPL </devguide/repl>` you can inspect the "
"default SoundEffects::"
msgstr ""
"たとえば :doc:`REPL </devguide/repl>` を使うと、デフォルトの SoundEffects を"
"調べられます::"

#: ../../audio.rst:195
msgid ""
">>> print(audio.SoundEffect())\n"
"SoundEffect(freq_start=500, freq_end=2500, duration=500, vol_start=255, "
"vol_end=0, wave=WAVE_SQUARE, fx=FX_NONE, shape=SHAPE_LOG)"
msgstr ""

#: ../../audio.rst:198
msgid ""
"This format is \"human readable\", which means it is easy for us to read,"
" and it looks very similar to the code needed to create that SoundEffect,"
" but it's not quite right. The ``repr()`` function can be used to create "
"a string of Python code that can be stored or transferred (you could "
"transmit sounds via micro:bit radio!) and be executed with the ``eval()``"
" function::"
msgstr ""
"このフォーマット「human readable」、つまり私たちが読みやすいもので、"
"そのサウンド効果を作るために必要なコードと非常に似ていますが、ちょっと違います。 "
"``repr()`` 関数は保存や転送が可能な Python コードの文字列を作成するために使えます"
"(micro:bit の無線機能でサウンドを送信できます！）。この文字列は ``eval()`` 関数で"
"実行できます：:"

#: ../../audio.rst:205
msgid ""
">>> from audio import SoundEffect\n"
">>> sound_code = repr(SoundEffect())\n"
">>> print(sound_code)\n"
"SoundEffect(500, 2500, 500, 255, 0, 3, 0, 18)\n"
">>> eval(\"audio.play({})\".format(sound_code))"
msgstr ""

#: ../../audio.rst:212
msgid "Sound Effects Example"
msgstr "サウンド効果のサンプルコード"

msgid ""
"from microbit import *\n"
"\n"
"# Play the default Sound Effect\n"
"audio.play(audio.SoundEffect())\n"
"\n"
"# Create a new Sound Effect and immediately play it\n"
"audio.play(audio.SoundEffect(\n"
"    freq_start=400,\n"
"    freq_end=2000,\n"
"    duration=500,\n"
"    vol_start=100,\n"
"    vol_end=255,\n"
"    wave=audio.SoundEffect.WAVE_TRIANGLE,\n"
"    fx=audio.SoundEffect.FX_VIBRATO,\n"
"    shape=audio.SoundEffect.SHAPE_LOG\n"
"))\n"
"\n"
"# Play a Sound Effect instance, modify an attribute, and play it again\n"
"my_effect = audio.SoundEffect(\n"
"    freq_start=400,\n"
"    freq_end=2000,\n"
")\n"
"audio.play(my_effect)\n"
"my_effect.duration = 1000\n"
"audio.play(my_effect)\n"
"\n"
"# You can also create a new effect based on an existing one, and modify\n"
"# any of its characteristics via arguments\n"
"my_modified_effect = my_effect.copy()\n"
"my_modified_effect.wave = audio.SoundEffect.WAVE_NOISE\n"
"audio.play(my_modified_effect)\n"
"\n"
"# Use sensor data to modify and play an existing Sound Effect instance\n"
"my_effect.duration = 600\n"
"while True:\n"
"    # int() might be temporarily neededhttps://github.com/microbit-"
"foundation/micropython-microbit-v2/issues/121\n"
"    my_effect.freq_start = int(scale(accelerometer.get_x(), from_=(-2000,"
" 2000), to=(0, 9999)))\n"
"    my_effect.freq_end = int(scale(accelerometer.get_y(), from_=(-2000, "
"2000), to=(0, 9999)))\n"
"    audio.play(my_effect)\n"
"\n"
"    if button_a.is_pressed():\n"
"        # Button A silences the micro:bit\n"
"        speaker.off()\n"
"        display.show(Image(\"09090:00000:00900:09990:00900\"))\n"
"        sleep(500)\n"
"    elif button_b.is_pressed():\n"
"        # On button B re-enable speaker & play an effect while showing an"
" image\n"
"        speaker.on()\n"
"        audio.play(audio.SoundEffect(), wait=False)\n"
"        display.show(Image.MUSIC_QUAVER)\n"
"        sleep(500)\n"
"\n"
"    sleep(150)"
msgstr ""
"from microbit import *\n"
"\n"
"# デフォルトのサウンド効果を再生する\n"
"audio.play(audio.SoundEffect())\n"
"\n"
"# 新規にサウンド効果を作成し、それをすぐに再生\n"
"audio.play(audio.SoundEffect(\n"
"    freq_start=400,\n"
"    freq_end=2000,\n"
"    duration=500,\n"
"    vol_start=100,\n"
"    vol_end=255,\n"
"    wave=audio.SoundEffect.WAVE_TRIANGLE,\n"
"    fx=audio.SoundEffect.FX_VIBRATO,\n"
"    shape=audio.SoundEffect.SHAPE_LOG\n"
"))\n"
"\n"
"# サウンド効果インスタンスを再生し、属性を変更して、もう一度再生\n"
"my_effect = audio.SoundEffect(\n"
"    freq_start=400,\n"
"    freq_end=2000,\n"
")\n"
"audio.play(my_effect)\n"
"my_effect.duration = 1000\n"
"audio.play(my_effect)\n"
"\n"
"# 既存のサウンド効果を元に新しいサウンド効果を作成し、引数でその特性を\n"
"# 変更することも可能です。\n"
"my_modified_effect = my_effect.copy()\n"
"my_modified_effect.wave = audio.SoundEffect.WAVE_NOISE\n"
"audio.play(my_modified_effect)\n"
"\n"
"# センサーデータを使って、既存のサウンド効果を変更して再生できます\n"
"my_effect.duration = 600\n"
"while True:\n"
"    # 今のところは int() が必要かもしれません: https://github.com/microbit-"
"foundation/micropython-microbit-v2/issues/121\n"
"    my_effect.freq_start = int(scale(accelerometer.get_x(), from_=(-2000,"
" 2000), to=(0, 9999)))\n"
"    my_effect.freq_end = int(scale(accelerometer.get_y(), from_=(-2000, "
"2000), to=(0, 9999)))\n"
"    audio.play(my_effect)\n"
"\n"
"    if button_a.is_pressed():\n"
"        # Aボタンは micro:bit を消音にします\n"
"        speaker.off()\n"
"        display.show(Image(\"09090:00000:00900:09990:00900\"))\n"
"        sleep(500)\n"
"    elif button_b.is_pressed():\n"
"        # Bボタンはスピーカーを再有効化し、サウンド効果の再生とイメージ表示を同じに行います\n"
"        speaker.on()\n"
"        audio.play(audio.SoundEffect(), wait=False)\n"
"        display.show(Image.MUSIC_QUAVER)\n"
"        sleep(500)\n"
"\n"
"    sleep(150)"

#: ../../audio.rst:218
msgid "AudioFrame"
msgstr ""

#: ../../audio.rst:223
msgid ""
"An ``AudioFrame`` object is a list of 32 samples each of which is an "
"unsigned byte (whole number between 0 and 255)."
msgstr ""
"``AudioFrame`` オブジェクトは32項目のリストです。"
"各項目の値は符号なしバイト(0と255の間の整数)です。"

#: ../../audio.rst:226
msgid "It takes just over 4 ms to play a single frame."
msgstr "１フレームを再生するのには４ミリ秒以上かかります。"

#: ../../audio.rst:230
msgid ""
"Overwrite the data in this ``AudioFrame`` with the data from another "
"``AudioFrame`` instance."
msgstr ""
"この ``AudioFrame`` のデータを、別の ``AudioFrame`` インスタンスのデータで上書きします。"

#: ../../audio.rst:233
msgid "``AudioFrame`` instance from which to copy the data."
msgstr "コピーするデータを持つ ``AudioFrame`` インスタンス。"

#: ../../audio.rst:236
msgid "Technical Details"
msgstr "技術的な詳細"

#: ../../audio.rst:239
msgid ""
"You don't need to understand this section to use the ``audio`` module. It"
" is just here in case you wanted to know how it works."
msgstr ""
"``audio`` モジュールを使うのにこのセクションを理解する必要はありません。"
"このモジュールがどのように機能するのか知りたい方のためにあります。"

#: ../../audio.rst:242
msgid ""
"The ``audio`` module can consumes an iterable (sequence, like list or "
"tuple, or generator) of ``AudioFrame`` instances, each 32 samples at "
"7812.5 Hz, and uses linear interpolation to output a PWM signal at "
"32.5 kHz, which gives tolerable sound quality."
msgstr ""
"``audio`` モジュールは ``AudioFrame`` インスタンスのイテラブル"
"(リストやタプルなどのシーケンス、またはジェネレータ)を巡回し、"
"各回 7812.5 Hz で 32 項目を採取し、線形補間を使用して 32.5 kHz の "
"PWM 信号を出力します。これにより、許容できる音質が得られます。"

#: ../../audio.rst:247
msgid ""
"The function ``play`` fully copies all data from each ``AudioFrame`` "
"before it calls ``next()`` for the next frame, so a sound source can use "
"the same ``AudioFrame`` repeatedly."
msgstr ""
"関数 ``play`` は、次のフレームを得るのに ``next()`` 呼び出す前に、　各 "
"``AudioFrame`` からすべてのデータを完全にコピーするので、音源は同じ "
"``AudioFrame`` を繰り返し使用できます。"

#: ../../audio.rst:251
msgid ""
"The ``audio`` module has an internal 64 sample buffer from which it reads"
" samples. When reading reaches the start or the mid-point of the buffer, "
"it triggers a callback to fetch the next ``AudioFrame`` which is then "
"copied into the buffer. This means that a sound source has under 4ms to "
"compute the next ``AudioFrame``, and for reliable operation needs to take"
" less 2ms (which is 32000 cycles in micro:bit V1 or 128000 in V2, so "
"should be plenty)."
msgstr ""
"``audio`` モジュールには64個のサンプルバッファがあり、そこからサンプルを読み取ります。"
"読み取りがバッファの開始点または中間点に達すると、次の ``AudioFrame`` を取り込むコール"
"バックをトリガして、バッファにコピーします。これは、音源が次の  ``AudioFrame`` を処理"
"するのは 4ms 以下であり、信頼できる操作のために 2ms 以下である必要があります"
"(micro:bit V1 では 32000 サイクル、V2 では 128000 サイクルなので十分です)。"

#: ../../audio.rst:260
msgid "AudioFrame Example"
msgstr "AudioFrame のサンプルコード"

msgid ""
"from microbit import display, sleep, button_a\n"
"import audio\n"
"import math\n"
"\n"
"def repeated_frame(frame, count):\n"
"    for i in range(count):\n"
"        yield frame\n"
"\n"
"# Press button A to skip to next wave.\n"
"def show_wave(name, frame, duration=1500):\n"
"    display.scroll(name + \" wave\", wait=False,delay=100)\n"
"    audio.play(repeated_frame(frame, duration),wait=False)\n"
"    for i in range(75):\n"
"        sleep(100)\n"
"        if button_a.is_pressed():\n"
"            display.clear()\n"
"            audio.stop()\n"
"            break\n"
"\n"
"frame = audio.AudioFrame()\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = int(math.sin(math.pi*i/16)*124+128.5)\n"
"show_wave(\"Sine\", frame)\n"
"\n"
"triangle = audio.AudioFrame()\n"
"\n"
"QUARTER = len(triangle)//4\n"
"for i in range(QUARTER):\n"
"    triangle[i] = i*15\n"
"    triangle[i+QUARTER] = 248-i*15\n"
"    triangle[i+QUARTER*2] = 128-i*15\n"
"    triangle[i+QUARTER*3] = i*15+8\n"
"show_wave(\"Triangle\", triangle)\n"
"\n"
"square = audio.AudioFrame()\n"
"\n"
"HALF = len(square)//2\n"
"for i in range(HALF):\n"
"    square[i] = 8\n"
"    square[i+HALF] = 248\n"
"show_wave(\"Square\", square)\n"
"sleep(1000)\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = 252-i*8\n"
"show_wave(\"Sawtooth\", frame)\n"
"\n"
"del frame\n"
"\n"
"#Generate a waveform that goes from triangle to square wave, reasonably "
"smoothly.\n"
"frames = [ None ] * 32\n"
"for i in range(32):\n"
"    frames[i] = frame = audio.AudioFrame()\n"
"    for j in range(len(triangle)):\n"
"        frame[j] = (triangle[j]*(32-i) + square[j]*i)>>5\n"
"\n"
"def repeated_frames(frames, count):\n"
"    for frame in frames:\n"
"        for i in range(count):\n"
"            yield frame\n"
"\n"
"\n"
"display.scroll(\"Ascending wave\", wait=False)\n"
"audio.play(repeated_frames(frames, 60))"
msgstr ""
"from microbit import display, sleep, button_a\n"
"import audio\n"
"import math\n"
"\n"
"def repeated_frame(frame, count):\n"
"    for i in range(count):\n"
"        yield frame\n"
"\n"
"# 次の波形に行くには A ボタンを押します。\n"
"def show_wave(name, frame, duration=1500):\n"
"    display.scroll(name + \" wave\", wait=False,delay=100)\n"
"    audio.play(repeated_frame(frame, duration),wait=False)\n"
"    for i in range(75):\n"
"        sleep(100)\n"
"        if button_a.is_pressed():\n"
"            display.clear()\n"
"            audio.stop()\n"
"            break\n"
"\n"
"frame = audio.AudioFrame()\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = int(math.sin(math.pi*i/16)*124+128.5)\n"
"show_wave(\"Sine\", frame)\n"
"\n"
"triangle = audio.AudioFrame()\n"
"\n"
"QUARTER = len(triangle)//4\n"
"for i in range(QUARTER):\n"
"    triangle[i] = i*15\n"
"    triangle[i+QUARTER] = 248-i*15\n"
"    triangle[i+QUARTER*2] = 128-i*15\n"
"    triangle[i+QUARTER*3] = i*15+8\n"
"show_wave(\"Triangle\", triangle)\n"
"\n"
"square = audio.AudioFrame()\n"
"\n"
"HALF = len(square)//2\n"
"for i in range(HALF):\n"
"    square[i] = 8\n"
"    square[i+HALF] = 248\n"
"show_wave(\"Square\", square)\n"
"sleep(1000)\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = 252-i*8\n"
"show_wave(\"Sawtooth\", frame)\n"
"\n"
"del frame\n"
"\n"
"#三角波から方形波になる波形を、適度になめらかに生成。\n"
"frames = [ None ] * 32\n"
"for i in range(32):\n"
"    frames[i] = frame = audio.AudioFrame()\n"
"    for j in range(len(triangle)):\n"
"        frame[j] = (triangle[j]*(32-i) + square[j]*i)>>5\n"
"\n"
"def repeated_frames(frames, count):\n"
"    for frame in frames:\n"
"        for i in range(count):\n"
"            yield frame\n"
"\n"
"\n"
"display.scroll(\"Ascending wave\", wait=False)\n"
"audio.play(repeated_frames(frames, 60))"
