# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 1.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-04 20:28+0900\n"
"PO-Revision-Date: 2020-12-26 22:41+0900\n"
"Last-Translator: Minoru Inachi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../audio.rst:2
msgid "Audio"
msgstr "オーディオ"

#: ../../audio.rst:6
msgid ""
"This module allows you to play your own sounds. If you are using a "
"micro:bit **V2**, ``audio`` is also part of the ``microbit`` module."
msgstr ""
"このモジュールはサウンドを再生できるようにします。 micro:bit **V2** であれば、 "
"``audio`` は ``microbit`` モジュールの一部にもなっています。"

#: ../../audio.rst:9
msgid ""
"By default sound output will be via the edge connector on pin 0 and the "
":doc:`built-in speaker <speaker>` **V2**. You can connect wired "
"headphones or a speaker to pin 0 and GND on the edge connector to hear "
"the sounds."
msgstr ""
"デフォルトでサウンドはエッジコネクタの端子 0 と ":doc:`組込みのスピーカー <speaker>` "
"**V2** に出力します。端子 0 と GND に有線ヘッドフォンやスピーカーを繋いで"
"サウンドを鳴らせます。"

#: ../../audio.rst:14
msgid "Functions"
msgstr "関数"

#: ../../audio.rst:18
msgid "Play the source to completion."
msgstr "音源を最後まで再生します。"

#: ../../audio.rst:20
msgid ""
"**source**: ``Sound`` - The ``microbit`` module contains a list of built-"
"in sounds that your can pass to ``audio.play()``."
msgstr ""
"**source**: ``Sound`` - ``microbit`` モジュールには ``audio.play()`` に"
"渡すことのできる組込みのサウンドがあります。"

#: ../../audio.rst:23
msgid ""
"**source**: ``AudioFrame`` - The source agrument can also be an iterable "
"of ``AudioFrame`` elements as described below."
msgstr ""
"**source**: ``AudioFrame`` - 引数 source には、後述する ``AudioFrame`` を"
"要素とするイテラブル(iterable)オブジェクトを渡すこともできます。"

#: ../../audio.rst:26
msgid ""
"**wait**: If ``wait`` is ``True``, this function will block until the "
"source is exhausted."
msgstr ""
"**wait**: ``wait`` が ``True`` の場合、音源の再生が終わるまでこの関数から戻りません。"

#: ../../audio.rst:29
msgid "**pin**: An optional argument to specify the output pin can be used to"
msgstr ""
"**pin**: 出力ピンをデフォルトの ``pin0`` を上書きするためのオプション引数です。"

#: ../../audio.rst:30
msgid ""
"override the default of ``pin0``. If we do not want any sound to play we "
"can use ``pin=None``."
msgstr ""
"音を鳴らしたくない場合は ``pin=None`` を指定します。"

#: ../../audio.rst:33
msgid ""
"**return_pin**: specifies a differential edge connector pin to connect to"
" an external speaker instead of ground. This is ignored for the **V2** "
"revision."
msgstr ""
"**return_pin**: スピーカの２本ある線の一方を接続する先である GND を別の端子に"
"したい場合に使います。"

#: ../../audio.rst:39
msgid "Return ``True`` if audio is playing, otherwise return ``False``."
msgstr "オーディオを再生中であれば ``True``、再生していなければ ``False`` を返します。"

#: ../../audio.rst:43
msgid "Stops all audio playback."
msgstr "すべてのオーディオ再生を停止します。"

#: ../../audio.rst:46
msgid "Classes"
msgstr "クラス"

#: ../../audio.rst:51
msgid ""
"An ``AudioFrame`` object is a list of 32 samples each of which is a "
"signed byte (whole number between -128 and 127)."
msgstr ""
"``AudioFrame`` オブジェクトは、符号付きバイト(-128と127の間の整数)の３２個の"
"サンプルのリストであり、各項目の値はf符号付きバイト(-128と127の間の整数)です。

#: ../../audio.rst:54
msgid "It takes just over 4 ms to play a single frame."
msgstr "１フレームを再生するのには４ミリ秒以上かかります。"

#: ../../audio.rst:57
msgid "Using audio"
msgstr "オーディオの使い方"

#: ../../audio.rst:59
msgid ""
"You will need a sound source, as input to the ``play`` function. You can "
"use the built-in sounds **V2** from the ``microbit`` module, "
"``microbit.Sound``, or generate your own, like in "
"``examples/waveforms.py``."
msgstr ""
"``play`` 関数への入力として音源が必要になります。"
"**V2** には ``microbit`` モジュールに組込みのサウンドである ``microbit.Sound`` "
"があります。音源を自作することもでき、 ``examples/waveforms.py`` に"
"自作の例があります。"

#: ../../audio.rst:64
msgid "Built-in sounds **V2**"
msgstr "**V2** の組込みサウンド"

#: ../../audio.rst:66
msgid "The built-in sounds can be called using ``audio.play(Sound.NAME)``."
msgstr "以下の組込みのサウンドは ``audio.play(Sound.NAME)`` のようにして再生できます。"

#: ../../audio.rst:68
msgid "``Sound.GIGGLE``"
msgstr ""

#: ../../audio.rst:69
msgid "``Sound.HAPPY``"
msgstr ""

#: ../../audio.rst:70
msgid "``Sound.HELLO``"
msgstr ""

#: ../../audio.rst:71
msgid "``Sound.MYSTERIOUS``"
msgstr ""

#: ../../audio.rst:72
msgid "``Sound.SAD``"
msgstr ""

#: ../../audio.rst:73
msgid "``Sound.SLIDE``"
msgstr ""

#: ../../audio.rst:74
msgid "``Sound.SOARING``"
msgstr ""

#: ../../audio.rst:75
msgid "``Sound.SPRING``"
msgstr ""

#: ../../audio.rst:76
msgid "``Sound.TWINKLE``"
msgstr ""

#: ../../audio.rst:77
msgid "``Sound.YAWN``"
msgstr ""

#: ../../audio.rst:80
msgid "Technical Details"
msgstr "技術的な詳細"

#: ../../audio.rst:83
msgid ""
"You don't need to understand this section to use the ``audio`` module. It"
" is just here in case you wanted to know how it works."
msgstr ""
"``audio`` モジュールを使うのにこのセクションを理解する必要はありません。"
"このモジュールがどのように機能するのか知りたい方のためにあります。"

#: ../../audio.rst:86
msgid ""
"The ``audio`` module consumes ``AudioFrame`` samples at 7812.5 Hz, and "
"uses linear interpolation to output a PWM signal at 32.5 kHz, which gives"
" tolerable sound quality."
msgstr ""
"``audio`` モジュールは 7812.5 Hz で ``AudioFrame`` サンプルを消費し、"
"線形補間を使って 32.5 kHz の PWM 信号を出力します。これにより、"
"許容できる音質が得られます。"

#: ../../audio.rst:90
msgid ""
"The function ``play`` fully copies all data from each ``AudioFrame`` "
"before it calls ``next()`` for the next frame, so a sound source can use "
"the same ``AudioFrame`` repeatedly."
msgstr ""
"関数 ``play`` は、次のフレームを得るのに ``next()`` 呼び出す前に、　各 "
"``AudioFrame`` からすべてのデータを完全にコピーするので、音源は同じ "
"``AudioFrame`` を繰り返し使用できます。"

#: ../../audio.rst:94
msgid ""
"The ``audio`` module has an internal 64 sample buffer from which it reads"
" samples. When reading reaches the start or the mid-point of the buffer, "
"it triggers a callback to fetch the next ``AudioFrame`` which is then "
"copied into the buffer. This means that a sound source has under 4ms to "
"compute the next ``AudioFrame``, and for reliable operation needs to take"
" less 2ms (which is 32000 cycles, so should be plenty)."
msgstr ""
"``audio`` モジュールには６４個のサンプルバッファがあり、そこからサンプルを読み取ります。"
"読み取りがバッファの開始点または中間点に達すると、次の ``AudioFrame`` を取り込むコール"
"バックをトリガして、バッファにコピーします。これは、音源が次の  ``AudioFrame`` を処理"
"するのに 4ms 以下かかり、信頼できる操作のために 2ms 以下を要する必要があることを"
"意味します(32000 サイクルなので十分です)。

#: ../../audio.rst:103
msgid "Example"
msgstr "サンプルコード"

msgid ""
"from microbit import display, sleep, button_a\n"
"import audio\n"
"import math\n"
"\n"
"def repeated_frame(frame, count):\n"
"    for i in range(count):\n"
"        yield frame\n"
"\n"
"# Press button A to skip to next wave.\n"
"def show_wave(name, frame, duration=1500):\n"
"    display.scroll(name + \" wave\", wait=False,delay=100)\n"
"    audio.play(repeated_frame(frame, duration),wait=False)\n"
"    for i in range(75):\n"
"        sleep(100)\n"
"        if button_a.is_pressed():\n"
"            display.clear()\n"
"            audio.stop()\n"
"            break\n"
"\n"
"frame = audio.AudioFrame()\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = int(math.sin(math.pi*i/16)*124+128.5)\n"
"show_wave(\"Sine\", frame)\n"
"\n"
"triangle = audio.AudioFrame()\n"
"\n"
"QUARTER = len(triangle)//4\n"
"for i in range(QUARTER):\n"
"    triangle[i] = i*15\n"
"    triangle[i+QUARTER] = 248-i*15\n"
"    triangle[i+QUARTER*2] = 128-i*15\n"
"    triangle[i+QUARTER*3] = i*15+8\n"
"show_wave(\"Triangle\", triangle)\n"
"\n"
"square = audio.AudioFrame()\n"
"\n"
"HALF = len(square)//2\n"
"for i in range(HALF):\n"
"    square[i] = 8\n"
"    square[i+HALF] = 248\n"
"show_wave(\"Square\", square)\n"
"sleep(1000)\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = 252-i*8\n"
"show_wave(\"Sawtooth\", frame)\n"
"\n"
"del frame\n"
"\n"
"#Generate a waveform that goes from triangle to square wave, reasonably "
"smoothly.\n"
"frames = [ None ] * 32\n"
"for i in range(32):\n"
"    frames[i] = frame = audio.AudioFrame()\n"
"    for j in range(len(triangle)):\n"
"        frame[j] = (triangle[j]*(32-i) + square[j]*i)>>5\n"
"\n"
"def repeated_frames(frames, count):\n"
"    for frame in frames:\n"
"        for i in range(count):\n"
"            yield frame\n"
"\n"
"\n"
"display.scroll(\"Ascending wave\", wait=False)\n"
"audio.play(repeated_frames(frames, 60))"
msgstr ""
"from microbit import display, sleep, button_a\n"
"import audio\n"
"import math\n"
"\n"
"def repeated_frame(frame, count):\n"
"    for i in range(count):\n"
"        yield frame\n"
"\n"
"# 次の波形に行くには A ボタンを押します。\n"
"def show_wave(name, frame, duration=1500):\n"
"    display.scroll(name + \" wave\", wait=False,delay=100)\n"
"    audio.play(repeated_frame(frame, duration),wait=False)\n"
"    for i in range(75):\n"
"        sleep(100)\n"
"        if button_a.is_pressed():\n"
"            display.clear()\n"
"            audio.stop()\n"
"            break\n"
"\n"
"frame = audio.AudioFrame()\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = int(math.sin(math.pi*i/16)*124+128.5)\n"
"show_wave(\"Sine\", frame)\n"
"\n"
"triangle = audio.AudioFrame()\n"
"\n"
"QUARTER = len(triangle)//4\n"
"for i in range(QUARTER):\n"
"    triangle[i] = i*15\n"
"    triangle[i+QUARTER] = 248-i*15\n"
"    triangle[i+QUARTER*2] = 128-i*15\n"
"    triangle[i+QUARTER*3] = i*15+8\n"
"show_wave(\"Triangle\", triangle)\n"
"\n"
"square = audio.AudioFrame()\n"
"\n"
"HALF = len(square)//2\n"
"for i in range(HALF):\n"
"    square[i] = 8\n"
"    square[i+HALF] = 248\n"
"show_wave(\"Square\", square)\n"
"sleep(1000)\n"
"\n"
"for i in range(len(frame)):\n"
"    frame[i] = 252-i*8\n"
"show_wave(\"Sawtooth\", frame)\n"
"\n"
"del frame\n"
"\n"
"#三角波から方形波になる波形を、適度になめらかに生成。\n"
"frames = [ None ] * 32\n"
"for i in range(32):\n"
"    frames[i] = frame = audio.AudioFrame()\n"
"    for j in range(len(triangle)):\n"
"        frame[j] = (triangle[j]*(32-i) + square[j]*i)>>5\n"
"\n"
"def repeated_frames(frames, count):\n"
"    for frame in frames:\n"
"        for i in range(count):\n"
"            yield frame\n"
"\n"
"\n"
"display.scroll(\"Ascending wave\", wait=False)\n"
"audio.play(repeated_frames(frames, 60))"


