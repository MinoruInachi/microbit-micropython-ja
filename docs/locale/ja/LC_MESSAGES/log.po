# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2022, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 1.1.0-beta.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-16 09:08+0900\n"
"PO-Revision-Date: 2022-09-17 22:48+0900\n"
"Last-Translator: Minoru Inachi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../log.rst:2
msgid "Data Logging **V2**"
msgstr "データログ **V2**"

#: ../../log.rst:6
msgid ""
"This module lets you log data to a ``MY_DATA`` file saved on a micro:bit "
"**V2** ``MICROBIT`` USB drive."
msgstr ""
"このモジュールは micro:bit **V2** の ``MICROBIT`` USB ドライブに保存された "
"``MY_DATA`` ファイルにデータを記録できるようにします。"

#: ../../log.rst:10
msgid ".. image:: log-my_data.png"
msgstr ""

#: ../../log.rst:11
msgid ""
"The data is structured in a table format and it can be viewed and plotted"
" with a browser."
msgstr ""
"データは表形式で構成され、ブラウザで表示したりプロットしたりできます。"

#: ../../log.rst:15
msgid ".. image:: log-html-view.jpeg"
msgstr ""

#: ../../log.rst:16
msgid ""
"Further guidance on this feature can be found on the `data logging page "
"of the microbit.org website <https://microbit.org/get-started/user-guide"
"/data-logging/>`_."
msgstr ""
"この機能に関する詳しいガイダンスは `microbit.org ウェブサイトのデータロギングページ "
"<https://microbit.org/get-started/user-guide/data-logging/>`_ "
"で確認できます。"

#: ../../log.rst:21
msgid "Functions"
msgstr "関数"

#: ../../log.rst:25
msgid "Set up the log file header."
msgstr ""
"ログファイルのヘッダーを設定します。"

#: ../../log.rst:27
msgid ""
"This function accepts any number of positional arguments, each creates a "
"column header, e.g. ``log.set_labels(\"X\", \"Y\", \"Z\")``."
msgstr ""
"この関数には任意の数の位置引数を指定でき、それぞれが列のヘッダーになります。"
"たとえば ``log.set_labels(\"X\", \"Y\", \"Z\")`` のように使います。"

#: ../../log.rst:30
msgid ""
"Ideally this function should be called a single time, before any data is "
"logged, to configure the data table header once."
msgstr ""
"理想的には、データが記録される前に一度だけこの関数を呼び出し、"
"データテーブルのヘッダーを一度だけ設定する必要があります。"

#: ../../log.rst:33
msgid ""
"If a log file already exists when the programme starts, or if this "
"function is called multiple times, it will check the labels already "
"defined in the log file. If this function call contains any new labels "
"not already present, it will generate a new header row with the "
"additional columns."
msgstr ""
"プログラム開始時にログファイルが既に存在する場合、あるいはこの関数が複数回呼ばれた場合、"
"ログファイルに既に定義されているラベルをチェックします。この関数呼び出しがまだ存在しない"
"新しいラベルを含む場合、追加カラムを持つ新しいヘッダ１行を生成します。"

#: ../../log.rst:39
msgid ""
"By default the first column contains a time stamp for each row. The time "
"unit can be selected via the ``timestamp`` argument, e.g. "
"``log.set_labels(\"temp\", timestamp=log.MINUTES)``"
msgstr ""
"デフォルトで、最初の列は各行のタイムスタンプを含んでいます。時間の単位はタイムスタンプ引数で"
"選択できます。"

#, fuzzy
#: ../../log.rst
msgid "param"
msgstr "パラメータ"

#: ../../log.rst:43
msgid ""
"Any number of positional arguments, each corresponding to an entry in the"
" log header."
msgstr ""
"任意の数の位置引数。それぞれがログヘッダの見出しになります。"

#: ../../log.rst:45
msgid ""
"Select the timestamp unit that will be automatically added as the first "
"column in every row. Timestamp values can be one of ``log.MILLISECONDS``,"
" ``log.SECONDS``, ``log.MINUTES``, ``log.HOURS``, ``log.DAYS`` or "
"``None`` to disable the timestamp. The default value is ``log.SECONDS``."
msgstr ""
"すべての行の最初の列として自動的に追加されるタイムスタンプの単位を選択します。"
"タイムスタンプの値は ``log.MILLISECONDS``, ``log.SECONDS``, ``log.MINUTES``, "
"``log.HOURS``, ``log.DAYS`` またはタイムスタンプを無効にする ``None`` のうちの"
"いずれかである必要があります。デフォルト値は ``log.SECONDS`` です。"

#: ../../log.rst:53
msgid "Configure mirroring of the data logging activity to the serial output."
msgstr ""
"ログのデータ記録をシリアル出力にミラーリングするかを設定します。"

#: ../../log.rst:55
msgid ""
"Serial mirroring is disabled by default. When enabled, it will print to "
"serial each row logged into the log file."
msgstr ""
"シリアル出力へのミラーリングはデフォルトで無効になっています。"
"有効にすると、ログファイルに記録された各行がシリアルにも出力されます。"

#: ../../log.rst:58
msgid "``True`` enables mirroring data to the serial output."
msgstr ""
"``True`` を指定するとシリアル出力にデータをミラーリングします。"

#: ../../log.rst:62
msgid "Delete the contents of the log, including headers."
msgstr ""
"ヘッダを含むログの内容を削除します。"

#: ../../log.rst:64
msgid ""
"To add the log headers again the ``set_labels`` function should to be "
"called after this function."
msgstr ""
"ログヘッダーを再び追加するには、この関数の後に ``set_labels`` 関数を呼び出す"
"必要があります。"

#: ../../log.rst:67
msgid ""
"There are two erase modes; \"full\" completely removes the data from the "
"physical storage, and \"fast\" invalidates the data without removing it."
msgstr ""
"消去には２種類のモードがあります。物理ストレージからデータを完全に削除する「完全」消去と、"
"データを削除せずに無効にする「高速」消去です。"

#: ../../log.rst:70
msgid ""
"``True`` selects a \"full\" erase and ``False`` selects the \"fast\" "
"erase method."
msgstr ""
"``True`` を指定すると完全消去になり、 ``False`` を指定すると高速消去になります。"

#: ../../log.rst:75
msgid "Add a data row to the log."
msgstr ""
"ログにデータ行を追加します。"

#: ../../log.rst:77
msgid "There are two ways to log data with this function:"
msgstr ""
"この関数でデータを記録するには、2つの方法があります。"

#: ../../log.rst:79
msgid "Via keyword arguments, each argument name representing a label."
msgstr ""
"キーワード引数を使う方法: 各引数名は見出しを表します。"

#: ../../log.rst:81
msgid "e.g. ``log.add(X=compass.get_x(), Y=compass.get_y())``"
msgstr "例: ``log.add(X=compass.get_x(), Y=compass.get_y())``"

#: ../../log.rst:83
msgid "Via a dictionary, each dictionary key representing a label."
msgstr "辞書を使う方法: 辞書の各キーが見出しを表します。"

#: ../../log.rst:85
msgid "e.g. ``log.add({ \"X\": compass.get_x(), \"Y\": compass.get_y() })``"
msgstr "例: ``log.add({ \"X\": compass.get_x(), \"Y\": compass.get_y() })``"

#: ../../log.rst:87
msgid ""
"The keyword argument option can be easier to use, and the dictionary "
"option allows the use of spaces (and other special characters), that "
"could not be used with the keyword arguments."
msgstr ""
"キーワード引数による方法は使いやすく、辞書による方法は、キーワード引数では使えない"
"スペース(およびその他の特殊文字)を使えます。"

#: ../../log.rst:91
msgid ""
"New labels not previously specified via the ``set_labels`` function, or "
"by a previous call to this function, will trigger a new header entry to "
"be added to the log with the extra labels."
msgstr ""
"``set_labels`` 関数あるいはこの関数の以前の呼出で事前に指定されなかった新しいラベルが"
"ある場合、その新規ラベルのあるログを追加できるように、新しいヘッダーエントリーができます。"

#: ../../log.rst:95
msgid ""
"Labels previously specified and not present in a call to this function "
"will be skipped with an empty value in the log row."
msgstr ""
"以前に指定され、この関数への呼び出しに存在しないラベルは、ログ行に空の値でスキップされます。"

#, fuzzy
#: ../../log.rst
msgid "raise"
msgstr "例外"

#: ../../log.rst:98
msgid ""
"When the log is full this function raises an ``OSError`` exception with "
"error code 28 ``ENOSPC``, which indicates there is no space left in the "
"device."
msgstr ""
"ログが一杯になると、この関数はエラーコード 28 ``ENOSPC`` で ``OSError`` "
"例外を発生させます。"

#: ../../log.rst:103
msgid "Examples"
msgstr "サンプルコード"

#: ../../log.rst:105
msgid "A minimal example::"
msgstr "最小限の例::"

#: ../../log.rst:107
msgid ""
"from microbit import *\n"
"import log\n"
"\n"
"# Set the timer to log data every 5 seconds\n"
"@run_every(s=5)\n"
"def log_temp():\n"
"    log.add(temp=temperature())\n"
"\n"
"while True:\n"
"    # Needed so that the programme doesn't end\n"
"    sleep(100)"
msgstr ""
"from microbit import *\n"
"import log\n"
"\n"
"# 5秒毎にデータを記録すえうタイマーを設定\n"
"@run_every(s=5)\n"
"def log_temp():\n"
"    log.add(temp=temperature())\n"
"\n"
"while True:\n"
"    # プログラムが終わらないように必要となるループ\n"
"    sleep(100)"

#: ../../log.rst:119
msgid "An example that runs through all of the functions of the log module API:"
msgstr "log モジュール API の全機能を実行する例:"

msgid ""
"from microbit import *\n"
"import log\n"
"\n"
"# Configure the labels and select a time unit for the timestamp\n"
"log.set_labels('temp', 'brightness', timestamp=log.SECONDS)\n"
"\n"
"# Send each data row to the serial output\n"
"log.set_mirroring(True)\n"
"\n"
"continue_logging = True\n"
"\n"
"# This decorator schedules this function to run every 10s 50ms\n"
"@run_every(s=10, ms=50)\n"
"def log_data():\n"
"    \"\"\"Log the temperature and light level, and display an icon.\"\"\""
"\n"
"    global continue_logging\n"
"    if continue_logging:\n"
"        display.show(Image.SURPRISED)\n"
"        try:\n"
"            log.add(temp=temperature(), "
"brightness=display.read_light_level())\n"
"        except OSError:\n"
"            continue_logging = False\n"
"            display.scroll(\"Log full\")\n"
"        sleep(500)\n"
"\n"
"while True:\n"
"    if button_a.is_pressed() and button_b.is_pressed():\n"
"        display.show(Image.CONFUSED)\n"
"        # Delete the log file using the \"full\" options, which takes\n"
"        # longer but ensures the data is wiped from the device\n"
"        log.delete(full=True)\n"
"        continue_logging = True\n"
"    elif button_a.is_pressed():\n"
"        display.show(Image.HAPPY)\n"
"        # Log only the light level, the temp entry will be empty. If the "
"log\n"
"        # is full this will throw an exception and the programme will "
"stop\n"
"        log.add({\n"
"            \"brightness\": display.read_light_level()\n"
"        })\n"
"    else:\n"
"        display.show(Image.ASLEEP)\n"
"    sleep(500)"
msgstr ""
"from microbit import *\n"
"import log\n"
"\n"
"# ラベルの設定とタイムスタンプの時間単位を選択\n"
"log.set_labels('temp', 'brightness', timestamp=log.SECONDS)\n"
"\n"
"# 各データ行をシリアル出力に送るようにする\n"
"log.set_mirroring(True)\n"
"\n"
"continue_logging = True\n"
"\n"
"# このデコレータは、この関数が10秒50ms毎に実行されるようにスケジュール\n"
"@run_every(s=10, ms=50)\n"
"def log_data():\n"
"    \"\"\"温度と光量を記録し、アイコンを表示する。\"\"\""
"\n"
"    global continue_logging\n"
"    if continue_logging:\n"
"        display.show(Image.SURPRISED)\n"
"        try:\n"
"            log.add(temp=temperature(), "
"brightness=display.read_light_level())\n"
"        except OSError:\n"
"            continue_logging = False\n"
"            display.scroll(\"Log full\")\n"
"        sleep(500)\n"
"\n"
"while True:\n"
"    if button_a.is_pressed() and button_b.is_pressed():\n"
"        display.show(Image.CONFUSED)\n"
"        # \"full\" オプションでログファイルを削除すると、時間はかかりますが\n"
"        # 確実にデバイスからデータを消去できます。\n"
"        log.delete(full=True)\n"
"        continue_logging = True\n"
"    elif button_a.is_pressed():\n"
"        display.show(Image.HAPPY)\n"
"        # 光量のみを記録し、温度の項目は空になります。ログが一杯になると\n"
"        # 例外が発生し、プログラムが停止します。\n"
"        log.add({\n"
"            \"brightness\": display.read_light_level()\n"
"        })\n"
"    else:\n"
"        display.show(Image.ASLEEP)\n"
"    sleep(500)"

